#! /usr/bin/env python

# Copyright (C) 2020  Aditya Vijaykumar <aditya.vijaykumar@ligo.org>
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import os
import pesummary
from pesummary.gw.file.read import read as GWRead
from pesummary.gw.pepredicates import PEPredicates
from pesummary.gw.p_astro import PAstro
from pesummary.utils.utils import make_dir, logger
from pesummary.utils.exceptions import InputError
import argparse


__doc__ = """This executable is used to generate a txt file containing the
source classification probailities"""


def command_line():
    """Generate an Argument Parser object to control the command line options
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-w", "--webdir", dest="webdir", help="make page and plots in DIR", metavar="DIR", required=True, default=None
    )
    parser.add_argument(
        "-t",
        "--test",
        dest="test",
        help="What test do you want to run? Currently only supports `imrct`",
        metavar="DIR",
        default=None,
    )
    parser.add_argument("-s", "--samples", dest="samples", help="Posterior samples hdf5 file", nargs="+", default=None)
    parser.add_argument("--labels", dest="labels", help="labels used to distinguish runs", nargs="+", default=None)
    parser.add_argument("--plot", dest="plot")
    return parser


def generate_imrct_deviation_parameters(inspiral_samples_file, postinspiral_samples_file, **kwargs):
    """Generate deviation parameter pdfs for the IMR Consistency Test
    
    Parameters
    ----------
    inspiral_samples_file: filename
        Path to inspiral samples file
    postinspiral_samples_file: filename
        Path to post-inspiral samples file
    kwargs: dict, optional
        Keywords to be passed to imrct_deviation_parameters_from_final_mass_final_spin

    Returns
    -------
    deviations: ProbabilityDict2D
    """

    samples_file_dict = dict(inspiral=inspiral_samples_file, postinspiral=postinspiral_samples_file)
    samples_dict = dict()

    for key in samples_file_dict.keys():
        f = GWRead(samples_file_dict[key])
        if not isinstance(f, pesummary.gw.file.formats.pesummary.PESummary):
            logger.info(
                "Calculating Final Mass and Final Spin samples as they are not present in {} samples file".format(key)
            )
            f.generate_all_posterior_samples()
        samples_dict["inspiral"] = f.samples

    imrct_deviations = imrct_deviation_parameters_from_final_mass_final_spin(
        samples_dict["inspiral"]["final_mass_non_evolved"],
        samples_dict["postinspiral"]["final_spin_non_evolved"],
        samples_dict["postinspiral"]["final_mass_non_evolved"],
        samples_dict["postinspiral"]["final_spin_non_evolved"],
        **kwargs
    )

    return imrct_deviations


def make_imrct_plots(imrct_deviations, webdir=None):
    """Save the plots generated by PEPredicates

    Parameters
    ----------
    imrct_deviations: ProbabilityDict2d
        Output of imrct_deviation_parameters_from_final_mass_final_spin
    webdir: str
        path to save the files
    labels: list
        lisy of strings to identify each result file
    plot_type: str
        The plot type that you wish to make
    probs: dict
        Dictionary of classification probabilities
    """
    if webdir is None:
        webdir = "./"
    fig, _, _, _ = imrct_deviations.plot(
        "final_mass_final_spin_deviations",
        type="triangle",
        truth=[0.0, 0.0],
        cmap="YlOrBr",
        levels=[0.68, 0.95],
        smooth=2.0,
        level_kwargs={"colors": ["k", "k"]},
    )
    fig.savefig(os.path.join(webdir, "imrct_deviations_triangle_plot.png"))


def main(args=None):
    """Top level interface for `summarytgr`
    """
    parser = command_line()
    opts = parser.parse_args(args=args)
    make_dir(opts.webdir)

    if opts.test == "imrct":
        imrct_deviations = generate_imrct_deviation_parameters()
        make_imrct_plots(imrct_deviations, webdir=webdir)


if __name__ == "__main__":
    main()
